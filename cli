$stdout.sync = true

require 'json'
require 'thor'
require 'yaml'

module Cleanups
	def cleanup
		map do |event|
			event = event.clone
			props = event["properties"]

			normalise_distinct_id_keys(props)
			normalise_cause(props)

			replace_cause_names(props)
			replace_event_names(event)
			remove_import_key(props)
			replace_visit_distinct_id_with_account_id(event, props)

			event unless unwanted_event_names.include?(event["event"]) 
		end
	end

	def normalise_distinct_id_keys(props)
		props["distinct_id"] = props.delete("distinctId") if props["distinctId"]
	end

	def normalise_cause(props)
		props["cause"] = props["cause"]["name"] if props["cause"].class == Hash
	end

	def replace_cause_names(props)
		original = props["cause"]
		props["cause"] = cause_name_replacements[original] || original
	end

	def replace_event_names(event)
		original = event["event"]
		event["event"] = event_name_replacements[original] || original
	end	

	def remove_import_key(props)
		props.delete("$import")
	end

	def replace_visit_distinct_id_with_account_id(event, props)
		if event["event"] == "visit"
			account_id = props["account_id"]
			props["distinct_id"] = account_id if account_id
		end
	end

	def unwanted_event_names
		@transaction_event_names ||= [
			"True", 
			"transaction:created",
			"transaction:confirmed",
			"transaction:declined",
			"transaction:pending",
			"management:activate_account",
			"login"
		]
	end

	def cause_name_replacements
		@cause_name_replacements ||= YAML.load(File.read("replacement_cause_names.yaml"))
	end	

	def event_name_replacements
		@event_name_replacements ||= YAML.load(File.read("replacement_event_names.yaml"))
	end
end

module Reductions
	def events
		@events.map{ |event| event["event"] }
	end

	def causes
		@events.map{ |event| event["properties"]["cause"] }
	end
end

class MixpanelEvents
	include Cleanups
	include Reductions

	def self.load(file_path)
		events = []
		File.readlines(file_path).each do |line|
			events << JSON.parse(line)
		end

		MixpanelEvents.new(events)
	end

	def initialize(events)
		@events = events.compact
	end

	def map(&block)
		MixpanelEvents.new(@events.clone.map(&block))
	end

	def keep_if(&block)
		MixpanelEvents.new(@events.inject([]) do |kept, event|
			kept << event if block.call(event)
			kept
		end)
	end

	def to_s
		@events.map do |event|
			JSON.generate(event)
		end
	end
end

class MixpanelRemix < Thor
	desc "unique_events FILE", "list events found in FILE"
	def unique_events(file_path)
		puts MixpanelEvents.load(file_path).events.uniq
	end

	desc "list_events FILE", "list all events found in FILE"
	def list_events(file_path)
		puts MixpanelEvents.load(file_path).events
	end	

	desc "unique_causes FILE", "list causes found in FILE"
	def unique_causes(file_path)
		puts MixpanelEvents.load(file_path).causes.uniq
	end

	desc "list_causes FILE", "list all causes found in FILE"
	def list_causes(file_path)
		puts MixpanelEvents.load(file_path).causes
	end

	desc "include_events FILE EVENT_NAMES", "exclude specified events"
	def include_events(file_path, comma_separated_event_names)
		event_names = comma_separated_event_names.split(",")
		
		kept = MixpanelEvents.load(file_path).keep_if do |event|
			 event_names.include?(event["event"])
		end

		puts kept.to_s
	end

	desc "exclude_events FILE EVENT_NAMES", "include specified events"
	def exclude_events(file_path, comma_separated_event_names)
		event_names = comma_separated_event_names.split(",")
		
		kept = MixpanelEvents.load(file_path).keep_if do |event|
			!event_names.include?(event["event"])
		end

		puts kept.to_s
	end

	desc "cleanup FILE", "cleanup data"
	def cleanup(file_path)
		puts MixpanelEvents.load(file_path).cleanup.to_s
	end

end

MixpanelRemix.start(ARGV)
