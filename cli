$stdout.sync = true

require 'json'
require 'thor'

class MixpanelEvents
	def self.load(file_path)
		events = []
		File.readlines(file_path).each do |line|
			events << JSON.parse(line)
		end

		MixpanelEvents.new(events)
	end

	def initialize(events)
		@events = events
	end

	def unique
		@events.map{ |event| yield event }.uniq.sort
	end

	def events
		@events.map{ |event| event["event"] }
	end

	def causes
		@events.map{ |event| event["properties"]["cause"] }
	end

	def keep_if(&block)
		MixpanelEvents.new(@events.inject([]) do |kept, event|
			kept << event if block.call(event)
			kept
		end)
	end

	def to_s
		@events.map do |event|
			JSON.generate(event)
		end
	end
end

class MixpanelRemix < Thor
	desc "unique_events FILE", "list events found in FILE"
	def unique_events(file_path)
		puts MixpanelEvents.load(file_path).events.uniq
	end

	desc "list_events FILE", "list all events found in FILE"
	def list_events(file_path)
		puts MixpanelEvents.load(file_path).events
	end	

	desc "unique_causes FILE", "list causes found in FILE"
	def unique_causes(file_path)
		puts MixpanelEvents.load(file_path).causes.uniq
	end

	desc "list_causes FILE", "list all causes found in FILE"
	def list_causes(file_path)
		puts MixpanelEvents.load(file_path).causes
	end

	desc "include_events EVENT_NAMES", "exclude specified events"
	def include_events(file_path, comma_separated_event_names)
		event_names = comma_separated_event_names.split(",")
		
		kept = MixpanelEvents.load(file_path).keep_if do |event|
			 event_names.include?(event["event"])
		end

		puts kept.to_s
	end

	desc "exclude_events EVENT_NAMES", "include specified events"
	def exclude_events(file_path, comma_separated_event_names)
		event_names = comma_separated_event_names.split(",")
		
		kept = MixpanelEvents.load(file_path).keep_if do |event|
			!event_names.include?(event["event"])
		end

		puts kept.to_s
	end

end

MixpanelRemix.start(ARGV)
